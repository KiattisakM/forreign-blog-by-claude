name: Deploy Foreign Stock Blog

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'        # Matches production tags like v1.0.0

jobs:
  dockerize_and_push_frontend:
    name: Dockerize & Push Frontend
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Short SHA
        id: short_sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lowercase Repository
        id: repository
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ github.repository }}

      - name: Set Deployment Environment
        id: env
        run: |
          echo "environment=prod" >> $GITHUB_ENV
          echo "project=stock-blog" >> $GITHUB_ENV

      - name: Build and Push Frontend Container Image
        uses: docker/build-push-action@v4
        with:
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          pull: true
          push: true
          context: .
          file: ./Dockerfile
          tags: |
            ghcr.io/${{ steps.repository.outputs.lowercase }}-frontend:${{ steps.short_sha.outputs.sha_short }}
            ghcr.io/${{ steps.repository.outputs.lowercase }}-frontend:latest

      - name: Set Frontend Image Name Output
        id: set_image_name
        run: echo "image_name=ghcr.io/${{ steps.repository.outputs.lowercase }}-frontend:${{ steps.short_sha.outputs.sha_short }}" >> $GITHUB_OUTPUT

    outputs:
      frontend_image: ${{ steps.set_image_name.outputs.image_name }}
      environment: ${{ env.environment }}
      project: ${{ env.project }}

  dockerize_and_push_backend:
    name: Dockerize & Push Backend
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Short SHA
        id: short_sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lowercase Repository
        id: repository
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ github.repository }}

      - name: Set Deployment Environment
        id: env
        run: |
          echo "environment=prod" >> $GITHUB_ENV
          echo "project=stock-blog" >> $GITHUB_ENV

      - name: Build and Push Backend Container Image
        uses: docker/build-push-action@v4
        with:
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          pull: true
          push: true
          context: ./server
          file: ./server/Dockerfile
          tags: |
            ghcr.io/${{ steps.repository.outputs.lowercase }}-backend:${{ steps.short_sha.outputs.sha_short }}
            ghcr.io/${{ steps.repository.outputs.lowercase }}-backend:latest

      - name: Set Backend Image Name Output
        id: set_image_name
        run: echo "image_name=ghcr.io/${{ steps.repository.outputs.lowercase }}-backend:${{ steps.short_sha.outputs.sha_short }}" >> $GITHUB_OUTPUT

    outputs:
      backend_image: ${{ steps.set_image_name.outputs.image_name }}
      environment: ${{ env.environment }}
      project: ${{ env.project }}

  deploy_frontend:
    name: Deploy Frontend to Nortezh
    needs: dockerize_and_push_frontend
    runs-on: ubuntu-latest
    steps:
      - name: Determine Deployment Environment
        id: env
        env:
          ENVIRONMENT: ${{ needs.dockerize_and_push_frontend.outputs.environment }}
        run: |
          if [[ "$ENVIRONMENT" == "prod" ]]; then
            echo "SA_AUTH_EMAIL=${{ secrets.NTZ_SVA_EMAIL }}" >> $GITHUB_ENV
            echo "SA_AUTH_KEY=${{ secrets.NTZ_SVA_KEY }}" >> $GITHUB_ENV
          else
            echo "SA_AUTH_EMAIL=${{ secrets.NTZ_SVA_EMAIL }}" >> $GITHUB_ENV
            echo "SA_AUTH_KEY=${{ secrets.NTZ_SVA_KEY }}" >> $GITHUB_ENV
          fi

      - name: Deploy Frontend to Nortezh
        uses: Nortezh/nortezh-action@v1.0.5
        with:
          action: deployment.create-revision
          project: ${{ needs.dockerize_and_push_frontend.outputs.project }}
          location: olufy-0
          name: stock-blog-frontend-${{ needs.dockerize_and_push_frontend.outputs.environment }}
          image: ${{ needs.dockerize_and_push_frontend.outputs.frontend_image }}
          type: WebService
        env:
          SA_AUTH_EMAIL: ${{ env.SA_AUTH_EMAIL }}
          SA_AUTH_KEY: ${{ env.SA_AUTH_KEY }}

  deploy_backend:
    name: Deploy Backend to Nortezh
    needs: dockerize_and_push_backend
    runs-on: ubuntu-latest
    steps:
      - name: Determine Deployment Environment
        id: env
        env:
          ENVIRONMENT: ${{ needs.dockerize_and_push_backend.outputs.environment }}
        run: |
          if [[ "$ENVIRONMENT" == "prod" ]]; then
            echo "SA_AUTH_EMAIL=${{ secrets.NTZ_SVA_EMAIL }}" >> $GITHUB_ENV
            echo "SA_AUTH_KEY=${{ secrets.NTZ_SVA_KEY }}" >> $GITHUB_ENV
          else
            echo "SA_AUTH_EMAIL=${{ secrets.NTZ_SVA_EMAIL }}" >> $GITHUB_ENV
            echo "SA_AUTH_KEY=${{ secrets.NTZ_SVA_KEY }}" >> $GITHUB_ENV
          fi

      - name: Deploy Backend to Nortezh
        uses: Nortezh/nortezh-action@v1.0.5
        with:
          action: deployment.create-revision
          project: ${{ needs.dockerize_and_push_backend.outputs.project }}
          location: olufy-0
          name: stock-blog-backend-${{ needs.dockerize_and_push_backend.outputs.environment }}
          image: ${{ needs.dockerize_and_push_backend.outputs.backend_image }}
          type: WebService
        env:
          SA_AUTH_EMAIL: ${{ env.SA_AUTH_EMAIL }}
          SA_AUTH_KEY: ${{ env.SA_AUTH_KEY }}
